name: Build and Publish Firmware

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup ESP-IDF
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.1
          target: esp32

      - name: Build firmware
        run: |
          . $IDF_PATH/export.sh
          idf.py build

      - name: Prepare firmware artifacts
        run: |
          mkdir -p firmware-artifacts
          cp build/bootloader/bootloader.bin firmware-artifacts/
          cp build/partition_table/partition-table.bin firmware-artifacts/
          cp build/esp32_macropad.bin firmware-artifacts/
          cp build/esp32_macropad.elf firmware-artifacts/
          # Create a merged firmware binary for easy flashing
          . $IDF_PATH/export.sh
          esptool.py --chip esp32 merge_bin \
            -o firmware-artifacts/esp32_macropad_merged.bin \
            --flash_mode dio --flash_freq 40m --flash_size 4MB \
            0x1000 build/bootloader/bootloader.bin \
            0x8000 build/partition_table/partition-table.bin \
            0x10000 build/esp32_macropad.bin

      - name: Create flash instructions
        run: |
          cat > firmware-artifacts/FLASH_INSTRUCTIONS.txt << 'EOF'
          ESP32 MacroPad Firmware Flash Instructions
          ============================================

          OPTION 1: Flash Individual Files (Recommended for Development)
          ---------------------------------------------------------------

          Using esptool.py:

            esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 921600 \
              --before default_reset --after hard_reset write_flash -z \
              --flash_mode dio --flash_freq 40m --flash_size 4MB \
              0x1000 bootloader.bin \
              0x8000 partition-table.bin \
              0x10000 esp32_macropad.bin

          Using idf.py (if you have ESP-IDF installed):

            idf.py -p /dev/ttyUSB0 flash


          OPTION 2: Flash Merged Binary (Easiest Method)
          -----------------------------------------------

          Using esptool.py:

            esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 921600 \
              --before default_reset --after hard_reset write_flash -z \
              --flash_mode dio --flash_freq 40m --flash_size 4MB \
              0x0 esp32_macropad_merged.bin


          NOTES:
          ------
          - Replace /dev/ttyUSB0 with your actual serial port
            Linux/macOS: Usually /dev/ttyUSB0, /dev/ttyACM0, or
              /dev/cu.usbserial-*
            Windows: Usually COM3, COM4, etc.

          - Install esptool.py if not already installed:
            pip install esptool

          - Hold the BOOT button while connecting USB if flash fails

          - After flashing, press the RESET button or power cycle the
            device


          VERIFY:
          -------
          Monitor the serial output to verify successful boot:

            idf.py -p /dev/ttyUSB0 monitor

          Or using screen/minicom:

            screen /dev/ttyUSB0 115200

          EOF

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: esp32-macropad-firmware
          path: firmware-artifacts/
          retention-days: 90

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            firmware-artifacts/bootloader.bin
            firmware-artifacts/partition-table.bin
            firmware-artifacts/esp32_macropad.bin
            firmware-artifacts/esp32_macropad_merged.bin
            firmware-artifacts/FLASH_INSTRUCTIONS.txt
          body: |
            ## ESP32 MacroPad Firmware ${{ github.ref_name }}

            ### Download and Flash

            1. **Download the firmware files** from the Assets section below
            2. **Install esptool.py** if you don't have it:
               `pip install esptool`
            3. **Flash the firmware** using one of these methods:

            #### Easy Method (Merged Binary)
            ```bash
            esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 921600 \
              write_flash -z --flash_mode dio --flash_freq 40m \
              --flash_size 4MB 0x0 esp32_macropad_merged.bin
            ```

            #### Standard Method (Individual Files)
            ```bash
            esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 921600 \
              write_flash -z --flash_mode dio --flash_freq 40m \
              --flash_size 4MB \
              0x1000 bootloader.bin \
              0x8000 partition-table.bin \
              0x10000 esp32_macropad.bin
            ```

            Replace `/dev/ttyUSB0` with your actual serial port.

            ### Hardware Requirements
            - ESP32-WROOM-32 development board
            - ILI9341 TFT touchscreen display (2.8" or 3.2")
            - USB cable for programming

            For detailed setup instructions, see the
            [README](https://github.com/albal/keybot/blob/main/README.md).

            ### What's Changed
            See [CHANGELOG.md](https://github.com/albal/keybot/blob/main/CHANGELOG.md)
            for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
